for(i in c(1:16)) {
boxplot(train_raw_df[,i],main=colnames(train_raw_df)[i])
}
sapply(train_raw_df,function(x)sum(is.na(x)))/nrow(train_raw_df)
corrplot(cor(train_raw_df, use = "na.or.complete"), method = 'number', type = 'lower', diag = FALSE, tl.srt = 0.1)
corr_table <- data.frame(correlation_with_TARGET_WINS = round(cor(train_raw_df, use = "na.or.complete"),4)[-1,"TARGET_WINS"])
corr_table$Theoretical_Effect <- c("Positive","Positive","Positive","Positive","Positive","Negative","Positive","Negative","Positive","Negative","Negative","Negative","Positive","Negative","Positive")
corr_table
par(mfrow=c(4,4))
for(i in c(1:16)) {
plot(density(train_raw_df[,i],na.rm=TRUE),main=colnames(train_raw_df)[i])
}
train_prepared_df <- train_raw_df
train_prepared_df$TEAM_BATTING_HBP <- NULL
train_prepared_df$TEAM_PITCHING_HR <- NULL
train_prepared_df$TEAM_PITCHING_H <- NULL
train_prepared_df$TEAM_PITCHING_BB <- NULL
train_prepared_df$TEAM_PITCHING_SO <- NULL
boxcox(lm(train_prepared_df$TEAM_FIELDING_E ~ 1))
train_prepared_df$TEAM_FIELDING_E_Transformed <- train_prepared_df$TEAM_FIELDING_E^(-1)
train_prepared_df$TEAM_FIELDING_E <- NULL
par(mfrow=c(1,2))
plot(density(train_prepared_df$TEAM_FIELDING_E_Transformed),main="",xlab="")
boxplot(train_prepared_df$TEAM_FIELDING_E_Transformed,main="")
train_prepared_df$TEAM_BATTING_1B <- train_prepared_df$TEAM_BATTING_H - train_prepared_df$TEAM_BATTING_2B - train_prepared_df$TEAM_BATTING_3B - train_prepared_df$TEAM_BATTING_HR
train_prepared_df$TEAM_BATTING_H <- NULL
par(mfrow=c(1,2))
plot(density(train_prepared_df$TEAM_BATTING_1B),main="",xlab="")
boxplot(train_prepared_df$TEAM_BATTING_1B,main="")
lm_team_bat_so <- lm(TEAM_BATTING_SO ~ . - TEAM_BASERUN_SB - TEAM_BASERUN_CS - TEAM_FIELDING_DP, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- predict(lm_team_bat_so,train_prepared_df[is.na(train_prepared_df$TEAM_BATTING_SO),])
lm_team_bas_sb <- lm(TEAM_BASERUN_SB ~ . - TEAM_BASERUN_CS - TEAM_FIELDING_DP, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- predict(lm_team_bas_sb,train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_SB),])
train_prepared_df[train_prepared_df$TEAM_BASERUN_SB<0,]$TEAM_BASERUN_SB <- 0
lm_team_fld_dp <- lm(TEAM_FIELDING_DP ~ . - TEAM_BASERUN_CS, data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- predict(lm_team_fld_dp,train_prepared_df[is.na(train_prepared_df$TEAM_FIELDING_DP),])
lm_team_bas_cs <- lm(TEAM_BASERUN_CS ~ ., data = train_prepared_df[,2:ncol(train_prepared_df)])
train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS <- predict(lm_team_bas_cs,train_prepared_df[is.na(train_prepared_df$TEAM_BASERUN_CS),])
print(paste0("TEAM_BATTING_SO - R-squared:",toString(round(summary(lm_team_bat_so)$r.squared,4))))
print(paste0("TEAM_BASERUN_SB - R-squared:",toString(round(summary(lm_team_bas_sb)$r.squared,4))))
print(paste0("TEAM_BASERUN_CS - R-squared:",toString(round(summary(lm_team_bas_cs)$r.squared,4))))
print(paste0("TEAM_FIELDING_DP - R-squared:",toString(round(summary(lm_team_fld_dp)$r.squared,4))))
summary(train_prepared_df)
lm_win_full <- lm(TARGET_WINS ~ .,data = train_prepared_df)
summary(lm_win_full)
confint(lm_win_full, level = 0.95)
lm_win_eff_adj <- lm(TARGET_WINS ~ .-TEAM_BASERUN_CS,data = train_prepared_df)
summary(lm_win_eff_adj)
lm_win_eff_adj2 <- lm(TARGET_WINS ~ .-TEAM_BASERUN_CS-TEAM_FIELDING_DP,data = train_prepared_df)
summary(lm_win_eff_adj2)
lm_win_exc_mis <- lm(TARGET_WINS ~ .-TEAM_BATTING_SO-TEAM_BASERUN_SB-TEAM_BASERUN_CS-TEAM_FIELDING_DP,data = train_prepared_df)
summary(lm_win_exc_mis)
par(mfrow=c(4,4))
plot(lm_win_full)
plot(lm_win_eff_adj)
plot(lm_win_eff_adj2)
plot(lm_win_exc_mis)
anova(lm_win_exc_mis, lm_win_eff_adj2)
anova(lm_win_eff_adj2, lm_win_eff_adj)
anova(lm_win_eff_adj, lm_win_full)
data.frame(
model = c("Full model","Exclude TEAM_BASERUN_CS","EXclude TEAM_BASERUN_CS and TEAM_FIELDING_DP","Exclude variables with missing values"),     Adjusted_R_Squared = c(summary(lm_win_full)$adj.r.squared,summary(lm_win_eff_adj)$adj.r.squared,summary(lm_win_eff_adj2)$adj.r.squared,summary(lm_win_exc_mis)$adj.r.squared),
Root_Mean_Square_Deviation = c(sqrt(mean(lm_win_full$residuals^2)),sqrt(mean(lm_win_eff_adj$residuals^2)),sqrt(mean(lm_win_eff_adj2$residuals^2)),sqrt(mean(lm_win_exc_mis$residuals^2)))
)
summary(test_raw_df)
test_prepared_df <- test_raw_df
test_prepared_df$TEAM_FIELDING_E_Transformed <- test_prepared_df$TEAM_FIELDING_E^(-1)
test_prepared_df$TEAM_BATTING_1B <- test_prepared_df$TEAM_BATTING_H - test_prepared_df$TEAM_BATTING_2B - test_prepared_df$TEAM_BATTING_3B - test_prepared_df$TEAM_BATTING_HR
test_prepared_df$TEAM_BATTING_H <- NULL
test_prepared_df$TEAM_BATTING_HBP <- NULL
test_prepared_df$TEAM_PITCHING_HR <- NULL
test_prepared_df$TEAM_PITCHING_H <- NULL
test_prepared_df$TEAM_PITCHING_BB <- NULL
test_prepared_df$TEAM_PITCHING_SO <- NULL
test_prepared_df <- test_raw_df
test_prepared_df$TEAM_FIELDING_E_Transformed <- test_prepared_df$TEAM_FIELDING_E^(-1)
test_prepared_df$TEAM_BATTING_1B <- test_prepared_df$TEAM_BATTING_H - test_prepared_df$TEAM_BATTING_2B - test_prepared_df$TEAM_BATTING_3B - test_prepared_df$TEAM_BATTING_HR
test_prepared_df$TEAM_BATTING_H <- NULL
test_prepared_df$TEAM_BATTING_HBP <- NULL
test_prepared_df$TEAM_PITCHING_HR <- NULL
test_prepared_df$TEAM_PITCHING_H <- NULL
test_prepared_df$TEAM_PITCHING_BB <- NULL
test_prepared_df$TEAM_PITCHING_SO <- NULL
test_prepared_df[is.na(test_prepared_df$TEAM_BATTING_SO),]$TEAM_BATTING_SO <- predict(lm_team_bat_so,test_prepared_df[is.na(test_prepared_df$TEAM_BATTING_SO),])
test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_SB),]$TEAM_BASERUN_SB <- predict(lm_team_bas_sb,test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_SB),])
test_prepared_df[test_prepared_df$TEAM_BASERUN_SB<0,]$TEAM_BASERUN_SB <- 0
test_prepared_df[is.na(test_prepared_df$TEAM_FIELDING_DP),]$TEAM_FIELDING_DP <- predict(lm_team_fld_dp,test_prepared_df[is.na(test_prepared_df$TEAM_FIELDING_DP),])
test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_CS),]$TEAM_BASERUN_CS <- predict(lm_team_bas_cs,test_prepared_df[is.na(test_prepared_df$TEAM_BASERUN_CS),])
summary(test_prepared_df)
m1_predict <- predict(lm_win_full, test_prepared_df)
m2_predict <- predict(lm_win_eff_adj, test_prepared_df)
m3_predict <- predict(lm_win_eff_adj2, test_prepared_df)
m4_predict <- predict(lm_win_exc_mis, test_prepared_df)
dist_df <- data.frame(rbind(
cbind(train_prepared_df$TARGET_WINS,"train data set"),
cbind(m1_predict,"test data model 1"),
cbind(m2_predict,"test data model 2"),
cbind(m3_predict,"test data model 3"),
cbind(m4_predict,"test data model 4")
),stringsAsFactors=FALSE)
colnames(dist_df) <- c("value","data")
dist_df$value <- as.numeric(dist_df$value)
library(ggplot2)
ggplot(dist_df, aes(x=value, color=data)) +
geom_density()
summary(lm_win_eff_adj)
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(dplyr)
library(ggplot2)
inc <- read.csv("https://raw.githubusercontent.com/charleyferrari/CUNY_DATA_608/master/module1/Data/inc5000_data.csv", header= TRUE)
tail(inc)
summary(inc)
#After looking over the summary data, I now want to dig into some max values and other data around max values. The easiest to explore is max number of Employees by Industry and the company within that industry. The top 3 industries based on the number of employees within 1 company is Human Resources, Business Products & Services, and Security. The top companies within these industries are Integrity Staffing Solutions, Sutherland Global Services, and Universal Services of America, respectively.
inc %>%
select(Name, Industry, Employees) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
arrange(desc(Employees)) %>%
top_n(1)
inc %>%
select(Name, Employees) %>%
filter(!is.na(Employees)) %>%
arrange(desc(Employees))
state_count <- inc %>%
count(State) %>%
arrange(desc(n))
plot(state_count)
state_count <- inc %>%
count(State) %>%
arrange(desc(n))
plot(state_count)
barplot(table(inc$State))
ggplot(inc, aes(x = State)) +
geom_bar()
#get top 20 states
state_count_top <- inc %>%
count(State) %>%
arrange(desc(n)) %>%
slice(1:20)
state_count_top
ggplot(state_count_top, aes(x = reorder(State, n), y = n)) +
geom_col() +
labs(x = "State", y = "Company Count", title = "Top 20 States with Most Companies") +
theme_bw()
#get bottom 20 states
state_count_low <- inc %>%
count(State) %>%
arrange(n) %>%
slice(1:20)
state_count_low
ggplot(state_count_low, aes(x = reorder(State, n), y = n)) +
geom_col() +
labs(x = "State", y = "Company Count", title = "20 States with Least Companies") +
theme_bw()
complete.cases(inc)
count(State) %>%
arrange(desc(n)) %>%
slice(1:3)
complete.cases(inc)
ny_inc <- complete.cases(inc) %>%
filter(State == 'NY')
?complete.cases
inc %>%
count(State) %>%
arrange(desc(n)) %>%
slice(1:3)
ny_inc
ny_inc <- inc %>%
filter(State == 'NY')
ny_inc
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(name = mean))
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean))
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean)) %>%
summarise_at(vars(Employees), list(Median = median))
ny_inc %>%
group_by(Industry) %>%
#summarise_at(vars(Employees), list(Avg = mean)) %>%
summarise_at(vars(Employees), list(Median = median))
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean)) %>%
#summarise_at(vars(Employees), list(Median = median))
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean)) #%>%
ny_inc <- inc %>%
filter(State == 'NY')
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean)) #%>%
ny_inc %>%
group_by(Industry) %>%
#  summarise_at(vars(Employees), list(Avg = mean)) #%>%
summarise_at(vars(Employees), list(Median = median))
ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean)) %>%
cbind(summarise_at(vars(Employees), list(Median = median)))
ny_avg <- ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Avg = mean))
ny_med <- ny_inc %>%
group_by(Industry) %>%
summarise_at(vars(Employees), list(Median = median))
ny_avg
ny_med
cbind(ny_avg, ny_med)
cbind(ny_avg, ny_med$Median)
ny_summary <- cbind(ny_avg, ny_med$Median)
ggplot(ny_summary, aes(x = Industry, y = ny_avg)) +
geom_bar()
plot(ny_summary)
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col()
ggplot(ny_summary, aes(x = Industry, y = ny_med)) +
geom_col()
ny_summary
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col()
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col()
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
theme(axis.title.x = element_text(angle = 90))
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
theme(axis.title.x = element_text(angle = 90, vjust = 0.5))
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
theme(axis.title.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
coord_flip()
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col() +
coord_flip()
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
coord_flip()
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col() +
coord_flip()
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col() +
coord_flip() +
labs(x = "Median Employees", title = "Top 20 States with Most Companies")
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col() +
coord_flip() +
labs(y = "Average Employees", title = "Top 20 States with Most Companies")
ggplot(ny_summary, aes(x = Industry, y = Avg)) +
geom_col() +
coord_flip() +
labs(y = "Average Employees", title = "Average Number of Employees by Industry in New York")
ggplot(ny_summary, aes(x = Industry, y = ny_med$Median)) +
geom_col() +
coord_flip() +
labs(y = "Median Employees", title = "Median Number of Employees by Industry in New York")
inc %>%
select(Industry, Employees, Revenue)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_path()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_grid(. ~ Industry)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_grid(. ~ Industry) +
stat_smooth(method = lm)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_grid(Industry ~ .) +
stat_smooth(method = lm)
?facet_grid
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_grid(Industry ~ .)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_grid(. ~ Industry, ncol = 5)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap( ~ Industry, ncol = 5)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(40000)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 40000)
inc %>%
select(Industry, Employees, Revenue) %>%
arrange(desc(Employees))
inc %>%
select(Industry, Employees, Revenue) %>%
arrange(desc(Revenue))
inc %>%
select(Industry, Employees, Revenue) %>%
arrange(desc(Employees))
inc %>%
select(Industry, Employees, Revenue) %>%
arrange(desc(Revenue))
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 40000)
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 30000)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 30000)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 30000) +
ylim(0, 5.0e+09)
facet_wrap( ~ Industry, ncol = 5)
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
xlim(0, 30000) +
ylim(0, 5.0e+09) +
facet_wrap( ~ Industry, ncol = 5)
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap( ~ Industry, ncol = 5) +
xlim(0, 30000) +
ylim(0, 5.0e+09)
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap( ~ Industry, ncol = 5) +
xlim(0, 30000) +
ylim(0, 5.0e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap( ~ Industry, ncol = 5
ggplot(inc, aes(x = Employees, y = Revenue)) +
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5) +
xlim(0, 30000) +
ylim(0, 5.0e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5) +
xlim(0, 20000) +
ylim(0, 2.5e+09)
inc %>%
count(State) %>%
arrange(desc(n)) %>%
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5) +
xlim(0, 20000) +
ylim(0, 2.5e+09)
inc %>%
count(State) %>%
arrange(desc(n))
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 5) +
xlim(0, 20000) +
ylim(0, 2.5e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 3) +
xlim(0, 20000) +
ylim(0, 2.5e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 8) +
xlim(0, 20000) +
ylim(0, 2.5e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 8) +
xlim(0, 10000) +
ylim(0, 2.5e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 8) +
xlim(20000) +
ylim(2.5e+09)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
facet_wrap(. ~ Industry, ncol = 8) +
xlim(20000, 80000) +
ylim(2.5e+09, 1.0e+10)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
#facet_wrap(. ~ Industry, ncol = 8) +
xlim(20000, 80000) +
ylim(2.5e+09, 1.0e+10)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point() +
#facet_wrap(. ~ Industry, ncol = 8) +
#xlim(20000, 80000) +
ylim(2.5e+09, 1.0e+10)
ggplot(inc, aes(x = Employees, y = Revenue)) +
geom_point()
ny_summary
inc
inc %>%
select(Industry, Employees, Revenue)
inc %>%
select(Industry, Employees, Revenue) %>%
mutate(rev = Revenue / Employees)
inc %>%
select(Industry, Employees, Revenue) %>%
group_by(Industry) %>%
mutate(rev = Revenue / Employees)
ny_inc %>%
group_by(Industry)
inc %>%
select(Industry, Employees, Revenue) %>%
group_by(Industry) %>%
summarise(Emp = sum(Employees))
inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(Emp = sum(Employees))
inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(Emp = sum(Employees)) %>%
summarise(Rev = sum(Revenue))
inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(across(list (Emp = sum(Employees, Rev = sum(Revenue)))))
inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(across(list (Emp = sum(Employees), Rev = sum(Revenue))))
inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(Emp = sum(Employees), Rev = sum(Revenue))
rev_per_emp <- inc %>%
select(Industry, Employees, Revenue) %>%
filter(!is.na(Employees)) %>%
group_by(Industry) %>%
summarise(Emp = sum(Employees), Rev = sum(Revenue))
ggplot(rev_per_emp, aes(x = Emp, y = Rev)) +
geom_point()
ggplot(rev_per_emp, aes(x = Emp, y = Rev)) +
geom_point() +
facet_wrap(. ~ Industry)
ggplot(rev_per_emp, aes(x = Emp, y = Rev)) +
geom_point()
ggplot(rev_per_emp, aes(x = Emp, y = Rev, colour = Industry)) +
geom_point() +
facet_wrap(. ~ Industry) +
#xlim(20000, 80000) +
ylim(2.5e+09, 1.0e+10)
ggplot(rev_per_emp, aes(x = Emp, y = Rev, colour = Industry)) +
geom_point()
ggplot(rev_per_emp, aes(x = Emp, y = Rev, colour = Industry, shape = Industry)) +
geom_point()
ggplot(rev_per_emp, aes(x = Emp, y = Rev, colour = Industry)) +
geom_point()
ggplot(rev_per_emp, aes(x = Emp, y = Rev, colour = Industry)) +
geom_point() +
labs(y = "Revenue", x = "Employee", title = "Revenue per Employee by Industry")
